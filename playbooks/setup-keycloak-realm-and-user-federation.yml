- name: Add my local LDAP server as an Keycloak user federation
  hosts: localhost
  become: false
  gather_facts: false
  vars_files:
    - ../vars/keycloak.yml
  tasks:
    - name: Ensure {{ target_realm }} realm exists
      community.general.keycloak_realm:
        auth_keycloak_url: "{{ auth_keycloak_url }}"
        auth_realm: "{{ auth_realm }}"
        auth_username: "{{ admin_user }}"
        auth_password: "{{ admin_password }}"
        id: "{{ target_realm }}"
        realm: "{{ target_realm }}"
        enabled: true
        state: present
    
    - name: Create LDAP user federation
      register: user_federation
      changed_when: "user_federation['end_state'] != user_federation['existing']"
      community.general.keycloak_user_federation:
        auth_keycloak_url: "{{ auth_keycloak_url }}"
        auth_realm: "{{ auth_realm }}"
        auth_username: "{{ admin_user }}"
        auth_password: "{{ admin_password }}"
        realm: "{{ target_realm }}"
        name: "{{ user_federation_name }}"
        state: present
        provider_id: ldap
        provider_type: org.keycloak.storage.UserStorageProvider
        config:
          editMode: READ_ONLY
          vendor: rhds
          usernameLDAPAttribute: uid
          rdnLDAPAttribute: uid
          uuidLDAPAttribute: uid
          userObjectClasses: inetOrgPerson, organizationalPerson
          connectionUrl: "{{ ldap_connection_url }}"
          usersDn: "{{ users_dn }}"
          authType: simple
          bindDn: "{{ bind_dn }}"
          bindCredential: "{{ bind_credential }}"
          trustEmail: true
          krbPrincipalAttribute: krbPrincipalName
        mappers:
          - name: email
            providerId: user-attribute-ldap-mapper
            config:
              user.model.attribute: email
              ldap.attribute: mail
              read.only: true
              always.read.value.from.ldap: false
              is.mandatory.in.ldap: false

          - name: username
            providerId: user-attribute-ldap-mapper
            config:
              user.model.attribute: username
              ldap.attribute: uid
              read.only: true
              is.mandatory.in.ldap: true
              always.read.value.from.ldap: false

          - name: modify date
            providerId: user-attribute-ldap-mapper
            config:
              is.mandatory.in.ldap: false
              user.model.attribute: modifyTimestamp
              ldap.attribute: modifyTimestamp
              read.only: true
              always.read.value.from.ldap: true

          - name: first name
            providerId: user-attribute-ldap-mapper
            config:
              user.model.attribute: firstName
              ldap.attribute: cn
              read.only: true
              always.read.value.from.ldap: true
              is.mandatory.in.ldap: true

          - name: last name
            providerId: user-attribute-ldap-mapper
            config:
              user.model.attribute: lastName
              ldap.attribute: sn
              read.only: true
              always.read.value.from.ldap: true
              is.mandatory.in.ldap: true

          - name: creation date
            providerId: user-attribute-ldap-mapper
            config:
              user.model.attribute: createTimestamp
              ldap.attribute: createTimestamp
              read.only: true
              always.read.value.from.ldap: true
              is.mandatory.in.ldap: false
              
          - name: group mappers
            providerId: group-ldap-mapper
            config:
              membership.attribute.type: DN
              group.name.ldap.attribute: cn
              membership.user.ldap.attribute: uid
              preserve.group.inheritance: true
              groups.dn: "ou=RealmRoles,dc=keycloak,dc=org"
              mode: LDAP_ONLY
              user.roles.retrieve.strategy: LOAD_GROUPS_BY_MEMBER_ATTRIBUTE
              membership.ldap.attribute: member
              ignore.missing.groups: false
              group.object.classes: groupOfNames
              groups.path: "/"
